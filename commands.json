{
  "entries": [
    {
      "description": "System Update",
      "commands": [
        {
          "distribution": "ArchLinux",
          "command": "sudo pacman -Syu --noconfirm"
        },
        {
          "distribution": "Ubuntu",
          "command": "sudo apt update -y && sudo apt upgrade -y"
        }
      ]
    },
    {
      "description": "Install Essential Packages",
      "commands": [
        {
          "distribution": "ArchLinux",
          "command": "sudo pacman -S --noconfirm --needed curl wget zsh git"
        },
        {
          "distribution": "Ubuntu",
          "command": "sudo apt install -y curl wget zsh git"
        }
      ],
      "config": {
        "commands": [
          {
            "check": "echo $SHELL | grep -q 'zsh' && echo 'true'",
            "command": "chsh -s $(which zsh)"
          }
        ]
      }
    },
    {
      "description": "Setup Workspace Directory",
      "commands": [
        {
          "check": "if [ -d ~/.workspace ]; then echo 'true'; fi",
          "command": "mkdir -p ~/.workspace"
        }
      ]
    },
    {
      "description": "Install Oh My Zsh and Plugins",
      "commands": [
        {
          "check": "if [ -d ~/.oh-my-zsh ]; then echo 'true'; fi",
          "command": "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\""
        }
      ],
      "config": {
        "commands": [
          {
            "check": "if [ -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]; then echo 'true'; fi",
            "command": "git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
          },
          {
            "check": "if [ -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]; then echo 'true'; fi",

            "command": "git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"
          },
          {
            "command": "sed -i '/^plugins=(.*)$/s//plugins=(zsh-autosuggestions zsh-syntax-highlighting git docker)/' ~/.zshrc"
          },
          {
            "command": "source ~/.zshrc",
            "shell": "Zsh"
          }
        ]
      }
    },
    {
      "description": "Git Configuration",
      "commands": [
        {
          "distribution": "ArchLinux",
          "command": "sudo pacman -S --noconfirm --needed git"
        },
        {
          "distribution": "Ubuntu",
          "command": "sudo apt install -y git"
        }
      ],
      "config": {
        "commands": [
          { "command": "git config --global user.name $GIT_USER_NAME" },
          {
            "command": "git config --global user.email $GIT_USER_EMAIL"
          },
          {
            "command": "git config --global init.defaultBranch main"
          },
          {
            "command": "git config --global core.editor code-insiders --wait"
          },
          {
            "command": "git config --global pull.rebase true"
          },
          {
            "distribution": "Ubuntu",
            "command": "sudo apt install gh -y"
          },
          {
            "distribution": "ArchLinux",
            "command": "sudo pacman -S --noconfirm --needed github-cli"
          },
          {
            "check": "gh auth status | grep -q 'Logged in to github.com' && echo 'true'",
            "command": "gh auth login",
            "run_spawn": true
          }
        ]
      },
      "setup": {
        "env_vars": ["GIT_USER_NAME", "GIT_USER_EMAIL"],
        "working_der": "~"
      }
    },
    {
      "description": "Install Additional Tools",
      "commands": [
        {
          "distribution": "Ubuntu",
          "command": "sudo apt install -y btop eza gnome-tweaks"
        },
        {
          "distribution": "ArchLinux",
          "command": "sudo pacman -S --noconfirm --needed btop eza"
        }
      ],
      "config": {
        "commands": [
          {
            "check": "if grep -q 'alias el=' ~/.zshrc; then echo 'true'; fi",
            "command": "sed -i '/# Example aliases/a# Add alias for eza\nalias el=\"eza --long --icons=auto --color=auto --group-directories-first --sort=type --hyperlink\"\nalias et=\"eza --tree --icons=auto --level=2 --long --color=auto --group-directories-first --sort=type --hyperlink\"\nalias eta=\"eza --tree --icons=auto --level=2 --long --color=auto --group-directories-first --all --sort=type --hyperlink\"\nalias ea=\"eza --long --icons=auto --color=auto --group-directories-first --all --sort=type --hyperlink\"' ~/.zshrc"
          },
          {
            "check": null,
            "command": "source ~/.zshrc",
            "shell": "Zsh"
          }
        ]
      }
    },
    {
      "description": "Install Microsoft Edge Beta",
      "commands": [
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "ArchLinux",
          "command": "yay -S --noconfirm --overwrite microsoft-edge-beta-bin"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main\" > /etc/apt/sources.list.d/microsoft-edge-beta.list'"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo rm microsoft.gpg"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo apt update -y"
        },
        {
          "check": "microsoft-edge-beta --version | grep -q 'Microsoft Edge' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo apt install microsoft-edge-beta -y"
        }
      ],
      "config": {
        "commands": [
          {
            "command": "echo '-> !TODO: Sign in to Microsoft Edge Beta'"
          }
        ]
      }
    },
    {
      "description": "Install Visual Studio Code Insiders",
      "commands": [
        {
          "check": "code-insiders --version | grep -q 'insider' && echo 'true'",
          "distribution": "ArchLinux",
          "command": "yay -S --noconfirm --overwrite visual-studio-code-insiders-bin"
        },
        {
          "check": "code-insiders --version | grep -q 'insider' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "wget 'https://code.visualstudio.com/sha/download?build=insider&os=linux-deb-x64' -O ~/Downloads/vscode-insiders.deb"
        },
        {
          "check": "code-insiders --version | grep -q 'insider' && echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo dpkg -i ~/Downloads/vscode-insiders.deb"
        }
      ],
      "config": {
        "commands": [
          {
            "command": "echo '-> !TODO: Sign in to Visual Studio Code Insiders'"
          }
        ]
      }
    },
    {
      "description": "Install IBus Bamboo for Ubuntu",
      "commands": [
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo add-apt-repository ppa:bamboo-engine/ibus-bamboo -y"
        },
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo apt update -y"
        },
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "sudo apt install -y ibus ibus-bamboo"
        },
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "ibus restart"
        },
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "env DCONF_PROFILE=ibus dconf write /desktop/ibus/general/preload-engines \"['BambooUs', 'Bamboo']\""
        },
        {
          "check": "command -v dpkg >/dev/null 2>&1 && dpkg -l | grep -q 'ibus' && echo 'true' || echo 'true'",
          "distribution": "Ubuntu",
          "command": "gsettings set org.gnome.desktop.input-sources sources \"[('xkb', 'us'), ('ibus', 'BambooUs')]\""
        }
      ]
    },
    {
      "description": "Install Nerd Fonts for Ubuntu",
      "commands": [
        {
          "check": "if [ -d /usr/share/fonts/Hack ]; then echo 'true'; fi",
          "distribution": "Ubuntu",
          "command": "wget 'https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Hack.zip' -O ~/Downloads/Hack.zip"
        }
      ],
      "config": {
        "commands": [
          {
            "distribution": "Ubuntu",
            "command": "sudo unzip -o ~/Downloads/Hack.zip -d /usr/share/fonts/Hack"
          },
          {
            "distribution": "Ubuntu",
            "command": "sudo fc-cache -f -v"
          }
        ]
      }
    },
    {
      "description": "Install Docker",
      "commands": [
        {
          "distribution": "Ubuntu",
          "command": "sudo apt install -y ca-certificates curl apt-transport-https"
        },
        {
          "distribution": "Ubuntu",
          "command": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg"
        },
        {
          "distribution": "Ubuntu",
          "command": "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null"
        },
        {
          "distribution": "Ubuntu",
          "command": "sudo apt update -y"
        },
        {
          "distribution": "Ubuntu",
          "command": "sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
        }
      ],
      "config": {
        "commands": [
          {
            "command": "sudo groupadd docker",
            "check": "groups | grep -q 'docker' && echo 'true'"
          },
          {
            "check": null,
            "command": "sudo usermod -aG docker $USER"
          }
        ]
      }
    },
    {
      "description": "Setup structure for bash configuration",
      "commands": [
        {
          "check": "if [ -d ~/.config/bash ]; then echo 'true'; fi",
          "command": "mkdir -p ~/.config/bash"
        }
      ],
      "config": {
        "commands": [
          {
            "check": "if [ -f ~/.config/bash/.bash_history ]; then echo 'true'; fi",
            "command": "mv ~/.bash_history ~/.config/bash/.bash_history && ln -s ~/.config/bash/.bash_history ~/.bash_history"
          },
          {
            "check": "if [ -f ~/.config/bash/.bash_logout ]; then echo 'true'; fi",
            "command": "mv ~/.bash_logout ~/.config/bash/.bash_logout && ln -s ~/.config/bash/.bash_logout ~/.bash_logout"
          },
          {
            "check": "if [ -f ~/.config/bash/.bash_profile ]; then echo 'true'; fi",
            "command": "mv ~/.bash_profile ~/.config/bash/.bash_profile && ln -s ~/.config/bash/.bash_profile ~/.bash_profile"
          }
        ]
      }
    },
    {
      "description": "Setup struct for zsh configuration",
      "commands": [
        {
          "check": "if [ -d ~/.config/zsh ]; then echo 'true'; fi",
          "command": "mkdir -p ~/.config/zsh"
        }
      ],
      "config": {
        "commands": [
          {
            "check": "if [ -f ~/.config/zsh/.zshrc ] || [ -f ~/.zshrc ]; then echo 'true'; fi",
            "command": "mv ~/.zshrc ~/.config/zsh/.zshrc && ln -s ~/.config/zsh/.zshrc ~/.zshrc"
          },
          {
            "check": "if [ -f ~/.config/zsh/.zsh_history ]; then echo 'true'; fi",
            "command": "mv ~/.zsh_history ~/.config/zsh/.zsh_history && ln -s ~/.config/zsh/.zsh_history ~/.zsh_history"
          },
          {
            "check": "if [ -d ~/.config/zsh/.oh-my-zsh ]; then echo 'true'; fi",
            "command": "mv ~/.oh-my-zsh ~/.config/zsh/.oh-my-zsh && ln -s ~/.config/zsh/.oh-my-zsh ~/.oh-my-zsh"
          }
        ]
      }
    },
    {
      "description": "Setup struct for git configuration",
      "commands": [
        {
          "check": "if [ -d ~/.config/git ]; then echo 'true'; fi",
          "command": "mkdir -p ~/.config/git"
        }
      ],
      "config": {
        "commands": [
          {
            "check": "if [ -f ~/.config/git/.gitconfig ]; then echo 'true'; fi",
            "command": "mv ~/.gitconfig ~/.config/git/.gitconfig && ln -s ~/.config/git/.gitconfig ~/.gitconfig"
          }
        ]
      }
    },
    {
      "description": "MTP: Mount Android Device",
      "commands": [
        {
          "distribution": "ArchLinux",
          "command": "sudo pacman -S mtpfs libmtp gvfs-mtp --noconfirm"
        }
      ]
    }
  ]
}
